//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TransactionClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBankService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IBankService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBalance", ReplyAction="http://tempuri.org/IBankService/GetBalanceResponse")]
        double GetBalance(string AccountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBalance", ReplyAction="http://tempuri.org/IBankService/GetBalanceResponse")]
        System.Threading.Tasks.Task<double> GetBalanceAsync(string AccountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/Transfer", ReplyAction="http://tempuri.org/IBankService/TransferResponse")]
        void Transfer(string From, string To, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/Transfer", ReplyAction="http://tempuri.org/IBankService/TransferResponse")]
        System.Threading.Tasks.Task TransferAsync(string From, string To, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/Withdraw", ReplyAction="http://tempuri.org/IBankService/WithdrawResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void Withdraw(string AccountName, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/Withdraw", ReplyAction="http://tempuri.org/IBankService/WithdrawResponse")]
        System.Threading.Tasks.Task WithdrawAsync(string AccountName, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/Deposit", ReplyAction="http://tempuri.org/IBankService/DepositResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Allowed)]
        void Deposit(string AccountName, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/Deposit", ReplyAction="http://tempuri.org/IBankService/DepositResponse")]
        System.Threading.Tasks.Task DepositAsync(string AccountName, double amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBankServiceChannel : TransactionClient.ServiceReference1.IBankService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BankServiceClient : System.ServiceModel.ClientBase<TransactionClient.ServiceReference1.IBankService>, TransactionClient.ServiceReference1.IBankService {
        
        public BankServiceClient() {
        }
        
        public BankServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double GetBalance(string AccountName) {
            return base.Channel.GetBalance(AccountName);
        }
        
        public System.Threading.Tasks.Task<double> GetBalanceAsync(string AccountName) {
            return base.Channel.GetBalanceAsync(AccountName);
        }
        
        public void Transfer(string From, string To, double amount) {
            base.Channel.Transfer(From, To, amount);
        }
        
        public System.Threading.Tasks.Task TransferAsync(string From, string To, double amount) {
            return base.Channel.TransferAsync(From, To, amount);
        }
        
        public void Withdraw(string AccountName, double amount) {
            base.Channel.Withdraw(AccountName, amount);
        }
        
        public System.Threading.Tasks.Task WithdrawAsync(string AccountName, double amount) {
            return base.Channel.WithdrawAsync(AccountName, amount);
        }
        
        public void Deposit(string AccountName, double amount) {
            base.Channel.Deposit(AccountName, amount);
        }
        
        public System.Threading.Tasks.Task DepositAsync(string AccountName, double amount) {
            return base.Channel.DepositAsync(AccountName, amount);
        }
    }
}
